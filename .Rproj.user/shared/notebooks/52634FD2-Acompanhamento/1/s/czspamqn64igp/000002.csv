"0","# Please note that this script updates every day automatically using the time of your computer. Hence, it might show an error message if you try to download the file before we have updated it."
"0",""
"0","#create the URL where the dataset is stored with automatic updates every day"
"0",""
"0","readUrl <- function() {"
"0","    out <- tryCatch("
"0","        {"
"0","            # Just to highlight: if you want to use more than one "
"0","            # R expression in the ""try"" part then you'll have to "
"0","            # use curly brackets."
"0","            # 'tryCatch()' will return the last evaluated expression "
"0","            # in case the ""try"" part was completed successfully"
"0",""
"0","            message(""Obtendo dados mais recentes da ECDC"")"
"0",""
"0","            url <- paste(""https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-"",format(Sys.Date()), "".xlsx"", sep = """")"
"0",""
"0","            #download the dataset from the website to a local temporary file"
"0","            GET(url, authenticate("":"", "":"", type=""ntlm""), write_disk(tf <- tempfile(fileext = "".xlsx"")))"
"0","            data <- read_excel(tf)"
"0","            # The return value of `readLines()` is the actual value "
"0","            # that will be returned in case there is no condition "
"0","            # (e.g. warning or error). "
"0","            # You don't need to state the return value via `return()` as code "
"0","            # in the ""try"" part is not wrapped insided a function (unlike that"
"0","            # for the condition handlers for warnings and error below)"
"0","            "
"0","        },"
"0","        error=function(cond) {"
"0","            message(""Arquivo ainda não atualizado:"")"
"0","            message(""Utilizando dados do dia anterior"")"
"0","            # Choose a return value in case of error"
"0","             url <- paste(""https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-"",format(Sys.Date() - 1), "".xlsx"", sep = """")"
"0",""
"0","            #download the dataset from the website to a local temporary file"
"0","            tf <- tempfile(fileext = "".xlsx"") "
"0","            GET(url, authenticate("":"", "":"", type=""ntlm""), write_disk(tf))"
"0","            data <- read_excel(tf)"
"0","            return(data)"
"0","            "
"0","        },"
"0","        warning=function(cond) {"
"0","            message(""URL caused a warning:"")"
"0","            message(""Here's the original warning message:"")"
"0","            message(cond)"
"0","            # Choose a return value in case of warning"
"0","            return(NULL)"
"0","        },"
"0","        finally={"
"0","        # NOTE:"
"0","        # Here goes everything that should be executed at the end,"
"0","        # regardless of success or error."
"0","        # If you want more than one expression to be executed, then you "
"0","        # need to wrap them in curly brackets ({...}); otherwise you could"
"0","        # just have written 'finally=<expression>' "
"0","        }"
"0","    )    "
"0","    return(out)"
"0","}"
"0",""
"0","data <- readUrl()"
"0",""
"0","# Prepare data"
"0",""
"0","dados_preparados_d0 <- data %>% "
"0","  filter(Cases > 0 ) %>% "
"0","  arrange(DateRep,GeoId) %>%"
"0","  group_by(GeoId) %>% "
"0","  mutate(sum_cases = cumsum(Cases),"
"0","         sum_deaths = cumsum(Deaths),"
"0","         days_from_first = as.Date(DateRep, format= ""%Y-%m-%d"") - as.Date(min(DateRep), format= ""%Y-%m-%d""),"
"0","         g_cases = ((Cases- lag(Cases))/lag(Cases))*100,"
"0","         g_deaths = ((Deaths-lag(Deaths))/lag(Deaths))*100) %>% "
"0","  select(DateRep,GeoId,sum_cases,sum_deaths, days_from_first,g_cases,g_deaths)"
"2","Erro: objeto 'Cases' não encontrado
"
